package NewLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Account_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AccountList_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new AccountType_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new AccountTypeList_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new FinanciaEntitylList_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new FinancialEntity_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new FinancialProduct_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new FinancialProductList_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new FinancialProductType_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new FinancialProductTypeList_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new FinancialProductTypeRef_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new Party_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new PartyList_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new Regulation_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new RegulatoryEntity_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new RegulatoryEntityList_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new RegulatoryEntityType_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new SpecificAttributes_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new TransactionTypeList_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new TranscationModeList_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new TransctionList_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new TransctionMode_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new Transctions_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new TransctionsType_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new FinancialProduct_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new FinancialProductTypeRef_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new RegulatoryEntityRef_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567bb5240L), MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567bb5283L), MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567bb58e1L), MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567c2fa5dL), MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567bea9d4L), MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567bb523fL), MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567bb5212L), MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567fc5574L), MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567bf04c5L), MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567bf04c1L), MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567c2fb2cL), MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567bb5242L), MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567bd7993L), MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567bb5245L), MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567bb5244L), MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567bb57f7L), MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567bb5261L), MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567bb5263L), MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567c2fcbfL), MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567c2fc76L), MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567bb5285L), MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567bb526eL), MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567bb5241L), MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567bb525bL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567bb5212L), MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567c2fb2cL), MetaIdFactory.conceptId(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567c2f7f7L)).seal();
}
