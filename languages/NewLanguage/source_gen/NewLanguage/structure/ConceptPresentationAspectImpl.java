package NewLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Account;
  private ConceptPresentation props_AccountList;
  private ConceptPresentation props_AccountType;
  private ConceptPresentation props_AccountTypeList;
  private ConceptPresentation props_FinanciaEntitylList;
  private ConceptPresentation props_FinancialEntity;
  private ConceptPresentation props_FinancialProduct;
  private ConceptPresentation props_FinancialProductList;
  private ConceptPresentation props_FinancialProductType;
  private ConceptPresentation props_FinancialProductTypeList;
  private ConceptPresentation props_FinancialProductTypeRef;
  private ConceptPresentation props_Party;
  private ConceptPresentation props_PartyList;
  private ConceptPresentation props_ROOT;
  private ConceptPresentation props_Regulation;
  private ConceptPresentation props_RegulatoryEntity;
  private ConceptPresentation props_RegulatoryEntityList;
  private ConceptPresentation props_RegulatoryEntityRef;
  private ConceptPresentation props_RegulatoryEntityType;
  private ConceptPresentation props_SpecificAttributes;
  private ConceptPresentation props_TransactionTypeList;
  private ConceptPresentation props_TranscationModeList;
  private ConceptPresentation props_TransctionList;
  private ConceptPresentation props_TransctionMode;
  private ConceptPresentation props_Transctions;
  private ConceptPresentation props_TransctionsType;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Account:
        if (props_Account == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc(" Account concept represents a financial account associated with a FinancialEntity(financial standing of an entity).");
          cpb.rawPresentation("Account");
          props_Account = cpb.create();
        }
        return props_Account;
      case LanguageConceptSwitch.AccountList:
        if (props_AccountList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AccountList = cpb.create();
        }
        return props_AccountList;
      case LanguageConceptSwitch.AccountType:
        if (props_AccountType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AccountType = cpb.create();
        }
        return props_AccountType;
      case LanguageConceptSwitch.AccountTypeList:
        if (props_AccountTypeList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AccountTypeList = cpb.create();
        }
        return props_AccountTypeList;
      case LanguageConceptSwitch.FinanciaEntitylList:
        if (props_FinanciaEntitylList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_FinanciaEntitylList = cpb.create();
        }
        return props_FinanciaEntitylList;
      case LanguageConceptSwitch.FinancialEntity:
        if (props_FinancialEntity == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc(" represents  a generic financial institution within a financial system.");
          cpb.rawPresentation("FinancialEntity");
          props_FinancialEntity = cpb.create();
        }
        return props_FinancialEntity;
      case LanguageConceptSwitch.FinancialProduct:
        if (props_FinancialProduct == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Financial products offered by financial institution like loan, investment,insurance ");
          cpb.presentationByReference(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567bb5212L, 0x713163e567bb5867L, "servicesofferedBy", "", "");
          props_FinancialProduct = cpb.create();
        }
        return props_FinancialProduct;
      case LanguageConceptSwitch.FinancialProductList:
        if (props_FinancialProductList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_FinancialProductList = cpb.create();
        }
        return props_FinancialProductList;
      case LanguageConceptSwitch.FinancialProductType:
        if (props_FinancialProductType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_FinancialProductType = cpb.create();
        }
        return props_FinancialProductType;
      case LanguageConceptSwitch.FinancialProductTypeList:
        if (props_FinancialProductTypeList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_FinancialProductTypeList = cpb.create();
        }
        return props_FinancialProductTypeList;
      case LanguageConceptSwitch.FinancialProductTypeRef:
        if (props_FinancialProductTypeRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567c2fb2cL, 0x713163e567c2fb2dL, "product", "", "");
          props_FinancialProductTypeRef = cpb.create();
        }
        return props_FinancialProductTypeRef;
      case LanguageConceptSwitch.Party:
        if (props_Party == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("represents individuals or organizations can be customers,investors, insurers, and other entities with roles in the financial domain.");
          cpb.rawPresentation("Party");
          props_Party = cpb.create();
        }
        return props_Party;
      case LanguageConceptSwitch.PartyList:
        if (props_PartyList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PartyList = cpb.create();
        }
        return props_PartyList;
      case LanguageConceptSwitch.ROOT:
        if (props_ROOT == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ROOT = cpb.create();
        }
        return props_ROOT;
      case LanguageConceptSwitch.Regulation:
        if (props_Regulation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Represents a rule, law, or policy that financial institutions and entities must adhere to");
          cpb.presentationByName();
          props_Regulation = cpb.create();
        }
        return props_Regulation;
      case LanguageConceptSwitch.RegulatoryEntity:
        if (props_RegulatoryEntity == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RegulatoryEntity");
          props_RegulatoryEntity = cpb.create();
        }
        return props_RegulatoryEntity;
      case LanguageConceptSwitch.RegulatoryEntityList:
        if (props_RegulatoryEntityList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RegulatoryEntityList = cpb.create();
        }
        return props_RegulatoryEntityList;
      case LanguageConceptSwitch.RegulatoryEntityRef:
        if (props_RegulatoryEntityRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x437c9db1d8f44db9L, 0xb294bc781192d511L, 0x713163e567c2f7f7L, 0x713163e567c2f7f8L, "entity", "", "");
          props_RegulatoryEntityRef = cpb.create();
        }
        return props_RegulatoryEntityRef;
      case LanguageConceptSwitch.RegulatoryEntityType:
        if (props_RegulatoryEntityType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RegulatoryEntityType = cpb.create();
        }
        return props_RegulatoryEntityType;
      case LanguageConceptSwitch.SpecificAttributes:
        if (props_SpecificAttributes == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SpecificAttributes");
          props_SpecificAttributes = cpb.create();
        }
        return props_SpecificAttributes;
      case LanguageConceptSwitch.TransactionTypeList:
        if (props_TransactionTypeList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TransactionTypeList = cpb.create();
        }
        return props_TransactionTypeList;
      case LanguageConceptSwitch.TranscationModeList:
        if (props_TranscationModeList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TranscationModeList = cpb.create();
        }
        return props_TranscationModeList;
      case LanguageConceptSwitch.TransctionList:
        if (props_TransctionList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TransctionList = cpb.create();
        }
        return props_TransctionList;
      case LanguageConceptSwitch.TransctionMode:
        if (props_TransctionMode == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TransctionMode");
          props_TransctionMode = cpb.create();
        }
        return props_TransctionMode;
      case LanguageConceptSwitch.Transctions:
        if (props_Transctions == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Transctions");
          props_Transctions = cpb.create();
        }
        return props_Transctions;
      case LanguageConceptSwitch.TransctionsType:
        if (props_TransctionsType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TransctionsType = cpb.create();
        }
        return props_TransctionsType;
    }
    return null;
  }
}
